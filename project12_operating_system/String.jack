// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int strLength;
    field int strMaxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) 
    {
        if (maxLength = 0)
        {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let strLength = 0;
        let strMaxLength = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() 
    {
        do str.dispose();

        return this;
    }

    /** Returns the current length of this string. */
    method int length() 
    {
        return strLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) 
    {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) 
    {
        let str[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) 
    {
        if (strLength < strMaxLength)
        {
            let str[strLength] = c;
            let strLength = strLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
        if (strLength > 0)
        {
            let strLength = strLength - 1;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var int res, idx, digit;
        var boolean isMinus;

        let res = 0;
        let idx = 0;
        let isMinus = false;

        if (str[0] = 45)
        {
            let idx = 1;
            let isMinus = true;
        }
        while ((idx < strLength))
        {
            let digit = str[idx] - 48;
            if ((-1 < digit) & (digit < 10))
            {
                let res = res * 10 + digit;
                let idx = idx + 1;
            }
            else
            {
                let idx = strLength;
            }
        }
        if (isMinus)
        {
            return -res;
        }
        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) 
    {
        let strLength = 0;
        if (val < 0)
        {
            do appendChar(45);
            let val = -val;
        }
        do setIntHelper(val);
        return;
    }
    method void setIntHelper(int val)
    {
        var int lastDigit;
        if (val > 10)
        {          
            let lastDigit = val % 10;
            do setIntHelper(val / 10);
            do appendChar(lastDigit + 48);
        }
        else
        {
            do appendChar(val + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() 
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() 
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
        return 34;
    }
}
