// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;              // freeList[0] = size, free[1] = next;
    static Array freeTail;

    /** Initializes the class. */
    function void init() 
    {
        let ram = 0;
        let freeList = 2048;

        let freeList[0] = 14335;        // 16384 - 2048 - 1
        let freeList[1] = null;

        let freeTail = freeList;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
    {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) 
    {
        var Array newSegment;
        var int originalSize;

        if (freeList[0] > size)
        {
            let originalSize = freeList[0];

            let freeList[0] = size;                         // When fragment is allocated as segment, the "next pointer becomes useless, segment size = fragment size + 1
            let newSegment = freeList + 1;                  // The base address of new segment starts from the position of "next pointer" of original fragment

            let freeList = newSegment + size;             // Move start of free list to next node
            let freeList[0] = originalSize - size - 1;
            let freeList[1] = null;
            let freeTail = freeList;
            
            return newSegment;
        }

        var Array prev, cur, post;
        let prev = freeList;
        let cur = freeList[1];
        while ((size > cur[0]) & ~(cur[1] = null))          // Search the first meet fragment
        {
            let prev = cur;
            let cur = cur[1];
        }

        if ((cur[1] = null) & (size > cur[0]))              // if memory is full, call deFragment
        {
            do Memory.deFragment();
            return Memory.alloc(size);
        }

        let post = cur[1];
        let originalSize = cur[0];
        if (size = originalSize)
        {
            let newSegment = cur + 1;
            let prev[1] = post;
            if (post = null)
            {
                let freeTail = prev;
            }
            return newSegment;
        }

        let cur[0] = size;
        let newSegment = cur + 1;

        let cur = newSegment + size;
        let cur[0] = originalSize - size - 1;
        let cur[1] = post;
        let prev[1] = cur;
        
        if (post = null)
        {
            let freeTail = cur;
        }

        return newSegment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) 
    {
        var Array segmentNode;
        let segmentNode = object - 1;
        let segmentNode[0] = segmentNode[0];

        var Array listEnd;
        let listEnd = freeTail;
        let listEnd[1] = segmentNode;
        let segmentNode[1] = null;
        let freeTail = segmentNode;

        return;
    }
    function void deFragment()
    {
        var Array prev;
        var Array cur;
        var Array post;
        let prev = null;
        let cur = freeList;

        while (~(cur[1] = null))
        {
            let post = cur[1];
            if (post = cur + cur[0] + 1)                // if post is under current
            {
                let cur[0] = cur[0] + post[0] + 1;
                let cur[1] = post[1];
                if (~(cur[1] = null))
                {
                    let prev = cur;
                    let cur = cur[1];
                }
            }
            else                                        // if post is above current
            {
                if (cur = post + post[0] + 1)
                {
                    let post[0] = post[0] + cur[0] + 1;
                    if (prev = null)
                    {
                        let freeList = post;
                    }
                    else
                    {
                        let prev[1] = post;
                    }
                    if (~(post[1] = null))
                    {
                        let prev = post;
                        let cur = post[1];
                    }
                    else
                    {
                        let cur = post;
                    }
                }        
                else
                {
                    if (~(cur[1] = null))
                    {
                        let prev = cur;
                        let cur = cur[1];
                    }
                }
            }
        }
        let freeTail = cur;
        
        return;
    }    
}
